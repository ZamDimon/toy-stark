
from __future__ import annotations
# This file was *autogenerated* from the file fri.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3)

from typing import List, Tuple, TypeAlias

from field import p, w, Fp

class FRILayer:
    """
    Represents a single FRI layer in the protocol
    """

    def __init__(self, polynomial: PolynomialRing, domain: List[Fp]):
        """
        Initializes the FRI layer with the given polynomial and domain
        """
        self._polynomial = polynomial
        self._domain = domain

    @staticmethod
    def _next_fri_domain(fri_domain: List[Fp]) -> List[Fp]:
        """
        Given a FRI domain, returns the next domain
        """

        return [x**_sage_const_2  for x in fri_domain[:len(fri_domain)//_sage_const_2 ]]
    
    @staticmethod
    def _next_fri_polynomial(polynomial: PolynomialRing, beta: Fp) -> PolynomialRing:
        """
        Given a polynomial, returns the next polynomial using FRI operator
        """

        odd_coefficients = polynomial.list()[_sage_const_1 ::_sage_const_2 ]
        even_coefficients = polynomial.list()[::_sage_const_2 ]
        odd = R(odd_coefficients)
        even = R(even_coefficients)

        return even + beta*odd

    def next_layer(self) -> FRILayer:
        """
        Computes the next FRI layer
        """

        return FRILayer(
            FRILayer._next_fri_polynomial(self.polynomial, self.beta), 
            FRILayer._next_fri_domain(self.domain), 
            Fp.random_element()
        )

# Let us test the next FRI function
R = PolynomialRing(Fp, names=('X',)); (X,) = R._first_ngens(1)
q = _sage_const_6 *X**_sage_const_4  + _sage_const_5 *X**_sage_const_3  + _sage_const_3 *X**_sage_const_2  + _sage_const_3 *X + _sage_const_1 
qq = FRILayer._next_fri_polynomial(q, Fp(_sage_const_2 ))
assert qq == (_sage_const_6 *X**_sage_const_2  + _sage_const_3 *X + _sage_const_1 ) + _sage_const_2 *(_sage_const_5 *X + _sage_const_3 ), "Next FRI polynomial is not correct"

